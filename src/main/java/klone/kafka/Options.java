/*
Copyright 2019 Willem Ferguson.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package klone.kafka;

import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import org.apache.kafka.clients.CommonClientConfigs;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.record.CompressionType;

import picocli.CommandLine.Option;

class Options {

    @Option(names = {"--bootstrap-server" }, description = "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster", defaultValue = "localhost:9200")
    public String[] bootstrapServers = { "localhost:9200" };

    @Option(names = {"--client-id" }, description = "An id string to pass to the server when making requests", defaultValue = "${env:HOSTNAME}")
    public String clientId = System.getenv("HOSTNAME");

    @Option(names = {"--property" }, description = "Kafka client properties", arity = "0..*")
    public Map<String, String> properties = new HashMap<>();

    Properties properties() {
        final var props = new Properties();

        props.putAll(properties);

        props.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, String.join(",", bootstrapServers));
        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);

        return props;
    }

    static class Source extends Options {
        
        @Option(names = {"--topic"}, description = "The list of topics that will be cloned", required = true, arity = "1..*")
        public String[] topics;    

        @Option(names = {"--group-id" }, description = "A unique string that identifies the consumer group this consumer belongs to", required = true)
        public String groupId;

        @Override Properties properties() {
            final var props = super.properties();
            
            props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);

            return props;
        }
    }
    static class Destination extends Options {

        @Option(names = {"--topic" }, description = "Map source topic to destination topics", arity = "0..*")
        public Map<String, String> topic = new HashMap<>();
        
        @Option(names = {"--transactional-id"}, description = "The TransactionalId to use for transactional delivery", defaultValue = "${env:HOSTNAME}")
        public String transactionalId = System.getenv("HOSTNAME");
    
        @Option(names = {"--compression-type"}, description = "The compression type for all data generated by the producer", defaultValue = "zstd")
        public String compressionType = CompressionType.ZSTD.name();

        @Override Properties properties() {
            final var props = super.properties();
            
            props.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, transactionalId);
            props.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, compressionType);

            return props;
        }
    }
}